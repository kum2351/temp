ReceiveRqt

<context:property-placeholder location="settings-${mule.env}.properties" />

<objectstore:config name="correlationStore" doc:name="ObjectStore" entryTtl="${EXP.RTGDTA}" expirationInterval="1000" maxEntries="${MAX.RTGDTA}" partition="wmq-correlation" persistent="true"/>

<db:generic-config name="Sybase_Configuration" url="jdbc:jtds:sybase://kolar1.nml.com:2330/seisdbus;user=KOM6351;password=131313" doc:name="Sybase Database Configuration" driverClassName="net.sourceforge.jtds.jdbc.Driver"/>

<flow name="rpanbs-esb-receiveRqtFlow">
	<http:listener config-ref="httpListenerConfig" path="/RequirementsMgmt/ReceiveRqt" doc:name="HTTP"/>
	<logger message="New Request received. Number of parts received:: #[message.inboundAttachments.size() ] ,  InboundProperties:: #[message.inboundProperties]" level="INFO" doc:name="New Request received"/>

	<foreach collection="#[message.inboundAttachments]" doc:name="For Each">
		<choice doc:name="log all xml parts">
			<when expression="#[payload.getDataSource().getContentType() contains 'xml']">
				<logger message="##Part :: #[flowVars.counter] ##  Content-Type : #[payload.getDataSource().getContentType()], Content-Transfer-Encoding : #[payload.getDataSource().getHeader('Content-Transfer-Encoding')] , Content-ID : #[payload.getDataSource().getHeader('Content-ID')] , Content-Disposition : #[payload.getDataSource().getHeader('Content-Disposition')], Name : #[payload.getDataSource().getHeader('name')], Filename : #[payload.getDataSource().getHeader('filename')]  ,  Payload :  #[message.payloadAs(java.lang.String)]" level="INFO" doc:name="part Body"/>
				<flow-ref name="processRequestIn" doc:name="processRequestIn"/>
			</when>
			<otherwise>
				<logger message="non XML part logger :: ##Part :: #[flowVars.counter] ##  Content-Type : #[payload.getDataSource().getContentType()], Content-Transfer-Encoding : #[payload.getDataSource().getHeader('Content-Transfer-Encoding')] , Content-ID : #[payload.getDataSource().getHeader('Content-ID')] , Content-Disposition : #[payload.getDataSource().getHeader('Content-Disposition')], Name : #[payload.getDataSource().getHeader('name')], Filename : #[payload.getDataSource().getHeader('filename')]" level="INFO" doc:name="dummy logger"/>
			</otherwise>
		</choice>
	</foreach>
	<choice doc:name="validate request content-Type">
		<when expression="#[message.inboundProperties.'Content-Type' contains 'multipart']">
			<logger message="Recived Valid MultiPart request with Content-Type = 'multipart/%'" level="INFO" doc:name="Recived Valid MultiPart request with Content-Type = 'multipart/%'"/>
		</when>
		<otherwise>
			<validation:is-true message="The message does not appear to be a multipart-MIME message.  Found #[message.inboundProperties.'Content-Type']" expression="false" doc:name="Validation"/>
		</otherwise>
	</choice>
	<choice doc:name="validate number of parts">
		<when expression="#[message.inboundAttachments.size()  &lt; 3 ]">
			<validation:is-true message="The message does not appear to have at least three MIME parts. (found: '  #[message.inboundAttachments.size()]  ')" expression="false" doc:name="Validation"/>
		</when>
		<otherwise>
			<logger message="dummy logger" level="DEBUG" doc:name="dummy logger"/>
		</otherwise>
	</choice>
	<expression-component doc:name="AttachmentCounter, Attachments">
		<![CDATA[sessionVars['AttachmentCounter'] = 0;
sessionVars['Attachments'] = new java.util.HashMap();
]]>
	</expression-component>
	<foreach collection="#[message.inboundAttachments]" doc:name="For Each">
		<choice doc:name="save 1st part soap, 2nd part acord">
			<when expression="#[message.payloadAs(java.lang.String) contains '&lt;TXLife']">
				<logger message="'Validated MIME'" level="INFO" doc:name="'Validated MIME'"/>
				<set-session-variable variableName="tempXML" value="#[message.payloadAs(java.lang.String)]" mimeType="text/xml" doc:name="tempXML"/>

			</when>
			<when expression="#[message.payloadAs(java.lang.String) contains 'Envelope&gt;']">
				<enricher target="#[sessionVars.OriginalSOAPMsg]" doc:name="Message Enricher">
					<processor-chain doc:name="Processor Chain">
						<set-payload value="#[payload.getDataSource().getContent()]" doc:name="Set Payload"/>
						<mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
					</processor-chain>
				</enricher>
			</when>
			<otherwise>
				<logger message="dummy logger" level="DEBUG" doc:name="dummy logger"/>
			</otherwise>
		</choice>
	</foreach>
	<foreach collection="#[message.inboundAttachments]" doc:name="For Each">
		<choice doc:name="process from 3rd part">
			<when expression="#[(message.payloadAs(java.lang.String) contains 'Envelope&gt;') == false &amp;&amp; (message.payloadAs(java.lang.String) contains '&lt;TXLife') == false]">
				<expression-component doc:name="get contentID of individual part">
					<![CDATA[flowVars.contentID = payload.getDataSource().getHeader('Content-Id');
if(flowVars.contentID == null) {  flowVars.contentID = payload.getDataSource().getHeader('Content-ID') }
if(flowVars.contentID  contains '<'){flowVars.contentID = flowVars.contentID.toString().substring(1, flowVars.contentID.toString().length() - 1  ) }
]]>
				</expression-component>
				<choice doc:name="check if contentID is empty or null ">
					<when expression="#[flowVars.contentID == null  || flowVars.contentID == ''  ]">
						<validation:is-true message="iAPSReceipt:Content Id not found" expression="false" doc:name="Validation"/>
					</when>
					<otherwise>
						<logger message="dummy logger" level="DEBUG" doc:name="dummy logger"/>
					</otherwise>
				</choice>
				<expression-component doc:name="contentType">
					<![CDATA[flowVars.contentType = payload.getDataSource().getContentType();
if(flowVars.contentType  contains ';'){flowVars.contentType = flowVars.contentType.toString().subString(0 , flowVars.contentType.toString().indexOf(';') - 1  ) }
]]>
				</expression-component>
				<choice doc:name="rounting based on 'text/xml'">
					<when expression="#[flowVars.contentType.toString() contains 'text/xml']">
						<flow-ref name="rpanbs-esb-receiveRqtFlow-processXMLAttachment" doc:name="rpanbs-esb-receiveRqtFlow-processXMLAttachment"/>
						<expression-component doc:name="HasIngenixData">
							<![CDATA[sessionVars['HasIngenixData'] = 'true']]>
						</expression-component>
						<choice doc:name="Saving 3rd part xml ">
							<when expression="#[message.payloadAs(java.lang.String) contains '&lt;rxProfileResult']">
								<set-session-variable variableName="tempXML1" value="#[message.payloadAs(java.lang.String)]" doc:name="tempXML1"/>
							</when>
							<otherwise>
								<logger message="dummy logger" level="DEBUG" doc:name="dummy logger"/>
							</otherwise>
						</choice>
					</when>
					<otherwise>
						<flow-ref name="rpanbs-esb-receiveRqtFlow1-processFileAttachment" doc:name="rpanbs-esb-receiveRqtFlow1-processFileAttachment"/>
						<set-session-variable variableName="HasPDF" value="#['true']" doc:name="HasPDF"/>
					</otherwise>
				</choice>
			</when>
			<otherwise>
				<logger message="dummy logger" level="DEBUG" doc:name="dummy logger"/>
			</otherwise>
		</choice>
	</foreach>
	<set-payload value="#[sessionVars.tempXML]" mimeType="application/xml" doc:name="Set Payload : tempXML"/>
	<expression-component doc:name="RqtOrdNum , TransType, REQUIREMENT_CODE">
		<![CDATA[sessionVars['RqtOrdNum'] = xpath3('/*:TXLife/*:TXLifeRequest/*:OLifE/*:Holding/*:Policy/*:ApplicationInfo/*:TrackingID');
sessionVars['TransType'] = xpath3('/*:TXLife/*:TXLifeRequest/*:TransType/@tc');
sessionVars['REQUIREMENT_CODE']= xpath3('/*:TXLife/*:TXLifeRequest/*:OLifE/*:Holding/*:Policy/*:RequirementInfo/*:ReqCode/@tc');]]>
	</expression-component>
	<logger message="Request received for order  :: #[sessionVars.RqtOrdNum]" level="INFO" doc:name="Request received for order : RqtOrdNum"/>
	<expression-component doc:name="validate required fields">
		<![CDATA[flowVars['txLifeValidation'] = '';
if(xpath3('/*:TXLife/*:TXLifeRequest/*:OLifE/*:Holding/*:Policy/*:PolNumber')  == null || xpath3('/*:TXLife/*:TXLifeRequest/*:OLifE/*:Holding/*:Policy/*:PolNumber') == ''  ){
flowVars.txLifeValidation = 'iAPSReceipt:Policy Number Missing' ; 
}
else{
sessionVars.Policy =xpath3('/*:TXLife/*:TXLifeRequest/*:OLifE/*:Holding/*:Policy/*:PolNumber');
}
if(xpath3('/*:TXLife/*:TXLifeRequest/*:OLifE/*:Holding/*:Policy/*:ApplicationInfo/*:TrackingID')  == null || xpath3('/*:TXLife/*:TXLifeRequest/*:OLifE/*:Holding/*:Policy/*:ApplicationInfo/*:TrackingID') == ''  ){
flowVars.txLifeValidation = 'iAPSReceipt:Tracking Id Missing' ; 
}
if(xpath3('/*:TXLife/*:TXLifeRequest/*:OLifE/*:Holding/*:Policy/*:RequirementInfo/*:ProviderOrderNum')  == null || xpath3('/*:TXLife/*:TXLifeRequest/*:OLifE/*:Holding/*:Policy/*:RequirementInfo/*:ProviderOrderNum') == ''  ){
flowVars.txLifeValidation = 'iAPSReceipt:Provider Order Number Missing' ; 
}
sessionVars.VendorName = xpath3('/*:TXLife/*:UserAuthRequest/*:VendorApp/*:VendorName');
]]>
	</expression-component>
	<choice doc:name="txLifeValidation">
		<when expression="#[flowVars.txLifeValidation  != '']">
			<validation:is-false message="#[flowVars.txLifeValidation]" expression="true" doc:name="Validation"/>
		</when>
		<otherwise>
			<logger message="dummy logger" level="DEBUG" doc:name="dummy logger"/>
		</otherwise>
	</choice>
	<choice doc:name="HasPDF">
		<when expression="#[sessionVars.HasPDF == 'true']">
			<set-payload value="#[sessionVars.OriginalSOAPMsg]" doc:name="Set Payload :OriginalSOAPMsg"/>
			<expression-component doc:name="Expression">
				<![CDATA[flowVars.card =dw('sizeOf payload.Envelope.Body.PostRq.WorkFolder.AttachmentPackages.*AttachmentPackage default 0');]]>
			</expression-component>
			<validation:is-false message="iAPSReceipt:Number of attachments must be greater than 0" expression="#[flowVars.card == '0' || flowVars.card == 0]" doc:name="Validation"/>
			<expression-component doc:name="Expression">
				<![CDATA[flowVars.i=0;
while( flowVars.i < flowVars.card ) {
flowVars.description = dw('payload.Envelope.Body.PostRq.WorkFolder.AttachmentPackages.*AttachmentPackage[flowVars.i].Attachments.Attachment.Document.Description');
if(flowVars.description == null || flowVars.description == '' || flowVars.description.toString().trim() == '' ){
 flowVars.txlifeValidation = 'iAPSReceipt:Description Missing for Attachment  ' + (flowVars.i +1 )
}
if(sessionVars['Attachments']['AttachmentFile' + flowVars.i]['fileName'] == null ){
 flowVars.txlifeValidation ='iAPSReceipt:Error Extracting Attachment  ' + (flowVars.i +1 );
}
if( sessionVars.REQUIREMENT_CODE == '348'){  sessionVars['Attachments']['AttachmentFile' + flowVars.i]['Description'] = 'RX'}
else{ sessionVars['Attachments']['AttachmentFile' + flowVars.i]['Description']  = dw('upper payload.Envelope.Body.PostRq.WorkFolder.AttachmentPackages.*AttachmentPackage[flowVars.i].Attachments.Attachment.Document.Description'); }
sessionVars.FileId = dw(" '/nml' ++ p('mule.dw.env') ++ '/' ++ p('AttachmentsDir') ") ;
sessionVars['Attachments']['AttachmentFile' + flowVars.i]['FileFormatCd'] = '1';
sessionVars['Attachments']['AttachmentFile' + flowVars.i]['FileSize'] = dw('upper payload.Envelope.Body.PostRq.WorkFolder.AttachmentPackages.*AttachmentPackage[flowVars.i].FileSize.NumUnits');
sessionVars['Attachments']['AttachmentFile' + flowVars.i]['UnitMeasurementCd'] = dw('upper payload.Envelope.Body.PostRq.WorkFolder.AttachmentPackages.*AttachmentPackage[flowVars.i].FileSize.UnitMeasurementCd');
flowVars['i'] = flowVars.i + 1;
}
]]>
			</expression-component>
			<choice doc:name="txLifeValidation">
				<when expression="#[flowVars.txLifeValidation  != '']">
					<validation:is-false message="#[flowVars.txLifeValidation]" expression="true" doc:name="Validation"/>
				</when>
				<otherwise>
					<logger level="DEBUG" doc:name="Logger" message="txlifeValidation"/>
				</otherwise>
			</choice>
		</when>
		<otherwise>
			<logger level="DEBUG" doc:name="Logger" message="1st PDF check"/>
		</otherwise>
	</choice>
	<logger message="Checking if order type is Pharmacy Scan.  REQUIREMENT_CODE :: #[sessionVars.REQUIREMENT_CODE] " level="INFO" doc:name="Checking if order type is Pharmacy Scan "/>
	<choice doc:name="If REQUIREMENT_CODE == '348'">
		<when expression="#[sessionVars.REQUIREMENT_CODE == 348 || sessionVars.REQUIREMENT_CODE == '348' ]">
			<logger message="Order Type is Pharmacy Scan" level="INFO" doc:name="Order Type is Pharmacy Scan"/>
			<choice doc:name="check HasIngenixData == 'true' ">
				<when expression="#[sessionVars.HasIngenixData == 'true' ]">
					<logger message="Message has Ingenix data.  Routing to Pharmacy Scan Label " level="INFO" doc:name="Message has Ingenix data.  Routing to Pharmacy Scan Label "/>
					<flow-ref name="rpanbs-esb-receiveRqtFlow-pharmacyScan" doc:name="rpanbs-esb-receiveRqtFlow-pharmacyScan"/>
				</when>
				<otherwise>
					<logger message="Message does NOT have Ingenix data.  #[sessionVars.REQUIREMENT_CODE]" level="INFO" doc:name="Message does NOT have Ingenix data.  "/>
				</otherwise>
			</choice>
		</when>
		<otherwise>
			<logger message="Order Type is NOT Pharmacy Scan  #[sessionVars.REQUIREMENT_CODE]" level="INFO" doc:name="Order Type is NOT Pharmacy Scan"/>
		</otherwise>
	</choice>
	<choice doc:name="HasPDF ">
		<when expression="#[sessionVars.HasPDF == 'true']">
			<logger message="Message does have PDF" level="INFO" doc:name="Message does have PDF"/>
			<set-payload value="#[sessionVars.tempXML]" mimeType="application/xml" doc:name="Set Payload : tempXML"/>
			<dw:transform-message doc:name="Transform Message">
				<dw:set-payload>
					<![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://ACORD.org/Standards/Life/2
---
ReceiveRqtRequest @(nml-version : '001', nml-type : 'Structure' ) : {
	MsgProtocol: 'SCIP',
	MsgProtocolVersionNum: '001',
	MsgTypeCde: 'N',
	MsgClientOperId: 'nbsrqmgt',
	MsgSenderApplId: 'nbsrqmgt',
	MsgName: 'ReceiveRqtRequest',
	MsgVersionNum: '001',
	ProdContractNum: payload.ns0#TXLife.ns0#TXLifeRequest.ns0#OLifE.ns0#Holding.ns0#Policy.ns0#PolNumber,
	TrackingID: payload.ns0#TXLife.ns0#TXLifeRequest.ns0#OLifE.ns0#Holding.ns0#Policy.ns0#ApplicationInfo.ns0#TrackingID,
	RequirementInfoUniqueID: payload.ns0#TXLife.ns0#TXLifeRequest.ns0#OLifE.ns0#Holding.ns0#Policy.ns0#RequirementInfo.ns0#RequirementInfoUniqueID,
	ProviderOrderNum: payload.ns0#TXLife.ns0#TXLifeRequest.ns0#OLifE.ns0#Holding.ns0#Policy.ns0#RequirementInfo.ns0#ProviderOrderNum[1..-1] when payload.ns0#TXLife.ns0#TXLifeRequest.ns0#OLifE.ns0#Holding.ns0#Policy.ns0#RequirementInfo.ns0#ProviderOrderNum[0..1] == 'Xx' otherwise payload.ns0#TXLife.ns0#TXLifeRequest.ns0#OLifE.ns0#Holding.ns0#Policy.ns0#RequirementInfo.ns0#ProviderOrderNum,
	RqtOrdCatTypCde: '2' when  payload.ns0#TXLife.ns0#TXLifeRequest.ns0#TransType.@tc == '1122' otherwise 99,
	Territory: payload.ns0#TXLife.ns0#TXLifeRequest.ns0#OLifE.ns0#Holding.ns0#Policy.ns0#ApplicationInfo.ns0#Territory,
	AttachmentPackageCnt : sizeOf sessionVars.Attachments when sessionVars.Attachments? and sessionVars.Attachments != '' otherwise '',
	
	(sessionVars.Attachments default [] map {
		AttachmentPackage :{
			FileName: $.fileName,
			Description : $.Description,
			FileId :sessionVars.FileId,
			FileFormatCd : $.FileFormatCd,
			FileSize :{
				NumUnits : $.FileSize,
				UnitMeasurementCd :  $.UnitMeasurementCd
			}
			
		}
		
		
	}), 
	
	ReqStatus: payload.ns0#TXLife.ns0#TXLifeRequest.ns0#OLifE.ns0#Holding.ns0#Policy.ns0#RequirementInfo.ns0#ReqStatus.@tc,
	ManuallyReceivedRqt: 'F'
}]]>
				</dw:set-payload>
			</dw:transform-message>
			<object-to-string-transformer doc:name="Object to String"/>
			<logger message="Sending message to ${Q.RQO.ROSS}. payload :: #[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>
			<wmq:outbound-endpoint queue="${Q.RQO.ROSS}" connector-ref="JMSQ_NON_PERSISTENT" doc:name="Q.RQO.ROSS"/>
		</when>
		<otherwise>
			<logger message="Message does not have PDF." level="INFO" doc:name="Message does not have PDF."/>
		</otherwise>
	</choice>
	<flow-ref name="replyFlow" doc:name="replyFlow"/>
	<catch-exception-strategy doc:name="Catch Exception Strategy">
		<logger message="Cause for exception :::::::    #[exception.cause] #[org.mule.util.ExceptionUtils.getRootCauseMessage(exception)]  #[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>
		<flow-ref name="assignExceptionVariables" doc:name="assignExceptionVariables"/>
		<flow-ref name="replyFlow" doc:name="replyFlow"/>
		<set-property propertyName="http.status" value="500" doc:name="Property"/>
	</catch-exception-strategy>

</flow>
<sub-flow name="rpanbs-esb-receiveRqtFlow-processXMLAttachment">
	<logger level="DEBUG" doc:name="dummy logger" message="dummy logger"/>
</sub-flow>
<sub-flow name="rpanbs-esb-receiveRqtFlow1-processFileAttachment">
	<expression-component doc:name="FileTypes">
		<![CDATA[flowVars['FileTypes'] =[ 'application/pdf': '.pdf', 
 'image/jpeg': '.jpg', 
  'image/pdf': '.pdf',
 'image/bmp': '.bmp',
 'image/gif': '.gif',
 'image/ief': '.ief',
 'image/tiff': '.tif',
'text/plain' : '.txt',
'application/zip' : '.zip'
]; 
if(flowVars['FileTypes'][flowVars.contentType]  != null ){
      flowVars['fileName'] = flowVars.contentID + flowVars['FileTypes'][flowVars.contentType];
}
else {flowVars['fileName'] =flowVars.contentID + '.dat' }
]]>
	</expression-component>
	<set-payload value="#[payload.getDataSource().getContent()]" doc:name="Set Payload"/>
	<logger message="##### #[flowVars.fileName]" level="INFO" doc:name="Logger"/>
	<component class="com.nml.saveToFile" doc:name="Java"/>
	<choice doc:name="Choice">
		<when expression="#[message.payloadAs(java.lang.String)  == 'false']">
			<validation:is-true message="'iAPSReceipt:Unable to write attachment file.'" expression="false" doc:name="Validation"/>
		</when>
		<otherwise>
			<expression-component doc:name="Attachments.AttachmentFiles">
				<![CDATA[if(flowVars.fileName != null && flowVars.fileName != '') {
   sessionVars['Attachments']['AttachmentFile' + sessionVars.AttachmentCounter] = ['fileName' : flowVars.fileName];
}
sessionVars['AttachmentCounter'] = sessionVars.AttachmentCounter +1 ;]]>
			</expression-component>
		</otherwise>
	</choice>
</sub-flow>
<sub-flow name="rpanbs-esb-receiveRqtFlow-pharmacyScan">
	<set-payload value="#[sessionVars.tempXML1]" doc:name="Set Payload :tempXML1" mimeType="application/xml"/>
	<expression-component doc:name="Expression">
		<![CDATA[flowVars['CompletionCodeError'] = '';
flowVars['CompletionCode'] = xpath3('/*:rxProfileResult/*:rxProfileDetail/@ingenixResponseStatus');
flowVars['SSN'] = xpath3('/*:rxProfileResult/*:rxProfileDetail/*:applicantDetail/*:ssn');
if(flowVars.CompletionCode == 'ApplicantNotFound' ){
   if(flowVars.SSN  != null  && flowVars.SSN.toString().trim() != ''){
      sessionVars['TriggerReasonCde'] = 'Not Found';
      sessionVars['AutoDocumentation'] = 'No Pharmacy Report found for insured with SSN supplied.  No further action is required.';
       if(sessionVars.Policy.toString().startsWith('D')  == false &&  sessionVars.Policy.toString().startsWith('TD')  == false ){
           sessionVars['TriggerStatus'] = 'FILE'
          }
      }
      else{
             sessionVars['TriggerReasonCde'] = 'Reorder w/ SSN';
              sessionVars['AutoDocumentation'] = 'No Pharmacy Report found.  SSN not provided.  Reorder with SSN.';
             }
}
else if(flowVars.CompletionCode == 'FoundEligibilityButNoClaims'){
      sessionVars['TriggerReasonCde'] = 'Clear';
      sessionVars['AutoDocumentation'] = 'Pharmacy Report found with no prescription records.';
      if(sessionVars.Policy.toString().startsWith('D')  == false &&  sessionVars.Policy.toString().startsWith('TD')  == false ){
           sessionVars['TriggerStatus'] = 'FILE'
          }
}
else if(flowVars.CompletionCode == 'FoundClaimsButNoEligibility'  || flowVars.CompletionCode == 'FoundClaimsAndEligibility' ){
      sessionVars['TriggerReasonCde'] ='Review Needed';
      sessionVars['AutoDocumentation'] = '';
}
else if(flowVars.CompletionCode == null || flowVars.CompletionCode.toString().trim() == '' ){
    flowVars['CompletionCodeMsg'] ==' Error - CompletionCode is blank :  ' ;
  flowVars['CompletionCodeError']  == 'iPharmReportReceipt: CompletionCode missing';
}
else { 
  flowVars['CompletionCodeMsg'] ==' Error - Invalid CompletionCode:  ' + flowVars.CompletionCode;
  flowVars['CompletionCodeError']  == 'iPharmReportReceipt:Invalid CompletionCode';}]]>
	</expression-component>
	<logger message="CompletionCode :: #[flowVars.CompletionCode]  , SSN:: #[flowVars.SSN]" level="INFO" doc:name="CompletionCode , SSN"/>
	<choice doc:name="Check if CompletionCodeError">
		<when expression="#[flowVars.CompletionCodeError != '']">
			<logger message="#[flowVars.CompletionCodeMsg]" level="INFO" doc:name="CompletionCodeMsg"/>
			<validation:is-true message="#[flowVars.CompletionCodeError]" expression="false" doc:name="Validation"/>
		</when>
		<otherwise>
			<logger message="TriggerReasonCde :: #[sessionVars.TriggerReasonCde] , AutoDocumentation :: #[sessionVars.AutoDocumentation]" level="INFO" doc:name="TriggerReasonCde, AutoDocumentation"/>
		</otherwise>
	</choice>
	<set-payload value="#[sessionVars.tempXML]" mimeType="application/xml" doc:name="tempXML (2nd part acord)"/>
	<expression-component doc:name="Policy,RqtOrdNum,Region,Policy">
		<![CDATA[sessionVars['Policy'] = xpath3('/*:TXLife/*:TXLifeRequest/*:OLifE/*:Holding/*:Policy/*:PolNumber');
sessionVars['RqtOrdNum'] = xpath3('/*:TXLife/*:TXLifeRequest/*:OLifE/*:Holding/*:Policy/*:RequirementInfo/*:RequirementInfoUniqueID');
sessionVars['Region'] =  xpath3('/*:TXLife/*:TXLifeRequest/*:OLifE/*:Holding/*:Policy/*:ApplicationInfo/*:Territory');
sessionVars['Policy'] = 'R001';]]>
	</expression-component>
	<logger message="'Finished Setting Pharm Environment Variables'" level="INFO" doc:name="'Finished Setting Pharm Environment Variables'"/>
	<flow-ref name="getRequirement" doc:name="getRequirement"/>
	<choice doc:name="Choice">
		<when expression="#[sessionVars.exceptionOccured == 'YES'  ]">
			<flow-ref name="replyFlow" doc:name="replyFlow"/>
		</when>
		<otherwise>
			<enricher target="#[sessionVars.RqtOrder]" doc:name="Message Enricher">
				<processor-chain doc:name="Processor Chain">
					<set-payload value="#[sessionVars.RqtOrder]" doc:name="RqtOrder"/>
					<expression-component doc:name="RqtOrdCstmTxtArrayCnt , RqtOrdReasonCde">
						<![CDATA[flowVars['RqtOrdCstmTxtArrayCnt'] =xpath3('//RqtOrdCstmTxtArrayCnt');
flowVars['RqtOrdReasonCde'] =xpath3('//RqtOrdRsnVal/RqtOrdReasonCde');]]>
					</expression-component>
					<mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
					<component class="com.nml.fillRqtOrdCstmTxtArray" doc:name="fillRqtOrdCstmTxtArray"/>
				</processor-chain>
			</enricher>

			<flow-ref name="updateOrder" doc:name="updateOrder"/>
			<choice doc:name="Choice">
				<when expression="#[sessionVars.exceptionOccured == 'YES'  ]">
					<flow-ref name="replyFlow" doc:name="replyFlow"/>
				</when>
				<otherwise>
					<expression-component doc:name="TriggerStatus">
						<![CDATA[if(sessionVars.TriggerStatus  != null && sessionVars.TriggerStatus != '' && sessionVars.TriggerStatus == 'FILE'){
   if(flowVars.RqtOrdReasonCde == '3' || flowVars.RqtOrdReasonCde == 3){ 
       sessionVars['TriggerStatus'] = 'PLANNER';
    }
}]]>
					</expression-component>
					<dw:transform-message doc:name="Transform Message">
						<dw:set-payload>
							<![CDATA[%dw 1.0
%output application/xml
---
CaseActivityRequest :{
	Policy : sessionVars.Policy,
	RqtOrdNum : sessionVars.RqtOrdNum,
	Region : sessionVars.Region,
	TriggerType : 'R001',
	TriggerReasonCde :sessionVars.TriggerReasonCde,
	AutoDocumentation : sessionVars.AutoDocumentation,
	ActivityStatus :sessionVars.TriggerStatus
	
	
}]]>
						</dw:set-payload>
					</dw:transform-message>
					<object-to-string-transformer doc:name="Object to String"/>
					<logger message="Sending message  to Case Activity flow for order ::   #[sessionVars.RqtOrdNum], Message ::    #[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Message sending to Case Activity flow"/>
					<wmq:outbound-endpoint queue="${Q.RQO.CASEACTIVITY}" connector-ref="WMQ" messageType="MQMT_DATAGRAM" doc:name="WMQ"/>
				</otherwise>
			</choice>
		</otherwise>
	</choice>

</sub-flow>

<sub-flow name="rpanbs-esb-receiveRqt-exceptionFlow">
	<flow-ref name="replyFlow" doc:name="replyFlow"/>

</sub-flow>
<sub-flow name="loggingFlow">
	<logger message="#[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>
	<set-payload value="#[false]" doc:name="Set Payload"/>
</sub-flow>
<sub-flow name="replyFlow">
	<set-payload value="#[sessionVars.OriginalSOAPMsg]" mimeType="application/xml" doc:name="Set Payload : OriginalSOAPMsg"/>
	<dw:transform-message doc:name="Transform Message">
		<dw:set-payload>
			<![CDATA[%dw 1.0
%output application/xml
%namespace NS1 http://schemas.xmlsoap.org/soap/envelope/
%namespace NS2 http://www.ACORD.org/Standards/AcordMsgSvc/1.1.0
---
	NS1#Envelope: {
		NS1#Body : {
	    NS2#PostRs:{
		NS2#Receiver: {
			NS2#PartyId:payload.Envelope.Body.PostRq.Sender.PartyId,
			NS2#PartyRoleCd:payload.Envelope.Body.PostRq.Sender.PartyRoleCd
		} ,
		NS2#Sender : {
			NS2#PartyId : payload.Envelope.Body.PostRq.Receiver.PartyId,
			NS2#PartyRoleCd: payload.Envelope.Body.PostRq.Receiver.PartyRoleCd
		},
		NS2#Application: {
			NS2#ApplicationCd: 'ACORD-TXLife',
			NS2#SchemaVersion: 'http://ACORD.org/Standards/Life/2/TXLife2.14.01'
		},
		NS2#TimeStamp : (now  >> "GMT") as :string {format : 'yyyy-MM-dd' } ++ now as :string {format : ' HH:mm:ssx:00'},
		NS2#MsgItems : {
			NS2#MsgItem : {
				NS2#MsgId : payload.Envelope.Body.PostRq.MsgItem.MsgId,
				NS2#MsgTypeCd : 'TXLifeRequest:' ++ (sessionVars.TransType default '' ) ,
				NS2#MsgStatusCd : 'invalid_payload' when sessionVars.exceptionOccured != null and sessionVars.exceptionOccured != '' and sessionVars.exceptionOccured == 'true' otherwise 'received',
				NS2#MsgStatusDetails: sessionVars.causeForException  when sessionVars.exceptionOccured != null and sessionVars.exceptionOccured != '' and sessionVars.exceptionOccured == 'true' otherwise 'message has been received successfully'
			}
		}
	}
}}]]>
		</dw:set-payload>
	</dw:transform-message>
	<logger message="Reply Back to Consumer ::  #[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>
</sub-flow>

<message-properties-transformer name="RQI_Audit_Message_Properties" doc:name="Message Properties">
	<add-message-property key="AccountingToken" value="#[sessionVars.messageContext.accountingToken]"/>
	<add-message-property key="Timestamp" value="#[sessionVars.messageContext.RqiTs]"/>
	<add-message-property key="AuditType" value="requestIn"/>
</message-properties-transformer>

<message-properties-transformer name="RQO_Audit_Message_Properties" doc:name="Message Properties">
	<add-message-property key="AccountingToken" value="#[sessionVars.messageContext.accountingToken]"/>
	<add-message-property key="Timestamp" value="#[sessionVars.messageContext.RqoTs]"/>
	<add-message-property key="AuditType" value="requestOut"/>
	<add-message-property key="queueName" value="${Q.RQO}"/>
	<add-message-property key="MessageName" value="#[sessionVars.messageContext.MessageName]"/>
	<add-message-property key="MessageVersion" value="#[sessionVars.messageContext.MessageVersionNum]"/>
	<add-message-property key="ApplicationFunction" value="#[sessionVars.messageContext.ApplicationFunction]"/>
</message-properties-transformer>

<message-properties-transformer name="RPI_Audit_Message_Properties" doc:name="Message Properties">
	<add-message-property key="AccountingToken" value="#[sessionVars.messageContext.accountingToken]"/>
	<add-message-property key="Timestamp" value="#[sessionVars.messageContext.RpiTs]"/>
	<add-message-property key="AuditType" value="replyIn"/>
	<add-message-property key="ServiceElapsedTime" value="#[flowVars.serviceElapsedTime]"/>
	<add-message-property key="MessageName" value="#[sessionVars.messageContext.MessageName]"/>
	<add-message-property key="MessageVersion" value="#[sessionVars.messageContext.MessageVersionNum]"/>
	<add-message-property key="ApplicationFunction" value="#[sessionVars.messageContext.ApplicationFunction]"/>
</message-properties-transformer>

<message-properties-transformer name="RPO_Audit_Message_Properties" doc:name="Message Properties">
	<add-message-property key="AccountingToken" value="#[sessionVars.messageContext.accountingToken]"/>
	<add-message-property key="Timestamp" value="#[sessionVars.messageContext.RpoTs]"/>
	<add-message-property key="AuditType" value="replyOut"/>
	<add-message-property key="queueName" value="#[sessionVars.messageContext.replyTo]"/>
	<add-message-property key="ServiceAndIntegrationServiceElapsedTime" value="#[flowVars.serviceAndIntegrationServiceElapsedTime]"/>
	<add-message-property key="MessageName" value="#[sessionVars.messageContext.MessageName]"/>
	<add-message-property key="MessageVersion" value="#[sessionVars.messageContext.MessageVersionNum]"/>
	<add-message-property key="ApplicationFunction" value="#[sessionVars.messageContext.ApplicationFunction]"/>
</message-properties-transformer>

<sub-flow name="captureRequestOutTime">
	<set-variable variableName="fieldName" value="RqoTs" doc:name="RqoTs"/>
	<flow-ref name="capture-time-on-field" doc:name="capture-time-on-field"/>
</sub-flow>

<sub-flow name="captureReplyInTime">
	<set-variable variableName="fieldName" value="RpiTs" doc:name="RpiTs"/>
	<flow-ref name="capture-time-on-field" doc:name="capture-time-on-field"/>
</sub-flow>

<sub-flow name="captureRequestInTime">
	<set-variable variableName="fieldName" value="RqiTs" doc:name="RqiTs"/>
	<flow-ref name="capture-time-on-field" doc:name="capture-time-on-field"/>
</sub-flow>

<sub-flow name="captureReplyOutTime">
	<set-variable variableName="fieldName" value="RpoTs" doc:name="RpoTs"/>
	<flow-ref name="capture-time-on-field" doc:name="capture-time-on-field"/>
</sub-flow>

<sub-flow name="capture-time-on-field">
	<expression-component doc:name="Set TS fieldsName in messageContext">
		<![CDATA[sessionVars['messageContext'][fieldName] = server.dateTime.format('yyyy-MM-dd hh:mm:ss.SSS')]]>
	</expression-component>
	<remove-variable variableName="fieldName" doc:name="Remove fieldName"/>
</sub-flow>

<sub-flow name="auditRequestOutMessage">
	<!-- enricher so we dont alter the payload but we make sure to copy properties essential for auditing -->
	<enricher source="#[message.outboundProperties['auditTime']]" target="#[flowVars['audited']]" doc:name="Message Enricher">
		<processor-chain doc:name="Processor Chain">
			<!-- dummy thing to satisfy enricher -->
			<set-property propertyName="auditTime" value="#[server.dateTime.format('yyyy-MM-dd hh:mm:ss.SSS')]" doc:name="set auditTime" />

			<vm:outbound-endpoint path="auditRqo" exchange-pattern="one-way" doc:name="audit Rqo VM">
				<vm:transaction action="NOT_SUPPORTED" />
			</vm:outbound-endpoint>
		</processor-chain>
	</enricher>    	
</sub-flow>  

<sub-flow name="auditReplyInMessage">
	<!-- enricher so we dont alter the payload but we make sure to copy properties essential for auditing -->
	<enricher source="#[message.outboundProperties['auditTime']]" target="#[flowVars['audited']]" doc:name="Message Enricher">
		<processor-chain doc:name="Processor Chain">
			<!-- dummy thing to satisfy enricher -->
			<set-property propertyName="auditTime" value="#[server.dateTime.format('yyyy-MM-dd hh:mm:ss.SSS')]" doc:name="set auditTime" />

			<vm:outbound-endpoint path="auditRpi" exchange-pattern="one-way" doc:name="audit Rpi VM">
				<vm:transaction action="NOT_SUPPORTED" />
			</vm:outbound-endpoint>
		</processor-chain>
	</enricher>    	
</sub-flow>

<sub-flow name="auditRequestInMessage">
	<!-- enricher so we dont alter the payload but we make sure to copy properties essential for auditing -->
	<enricher source="#[message.outboundProperties['auditTime']]" target="#[flowVars['audited']]" doc:name="Message Enricher">
		<processor-chain doc:name="Processor Chain">
			<!-- dummy thing to satisfy enricher -->
			<set-property propertyName="auditTime" value="#[server.dateTime.format('yyyy-MM-dd hh:mm:ss.SSS')]" doc:name="set auditTime" />

			<vm:outbound-endpoint path="auditRqi" exchange-pattern="one-way" doc:name="audit Rqi VM">
				<vm:transaction action="NOT_SUPPORTED" />
			</vm:outbound-endpoint>
		</processor-chain>
	</enricher>    	
</sub-flow>

<sub-flow name="auditReplyOutMessage">
	<!-- enricher so we dont alter the payload but we make sure to copy properties essential for auditing -->
	<enricher source="#[message.outboundProperties['auditTime']]" target="#[flowVars['audited']]" doc:name="Message Enricher">
		<processor-chain doc:name="Processor Chain">
			<!-- dummy thing to satisfy enricher -->
			<set-property propertyName="auditTime" value="#[server.dateTime.format('yyyy-MM-dd hh:mm:ss.SSS')]" doc:name="set auditTime" />

			<vm:outbound-endpoint path="auditRpo" exchange-pattern="one-way" doc:name="audit Rpo VM">
				<vm:transaction action="NOT_SUPPORTED" />
			</vm:outbound-endpoint>
		</processor-chain>
	</enricher>    	
</sub-flow>

<flow name="Audit_RequestIn">
	<vm:inbound-endpoint  path="auditRqi" doc:name="audit Rqi VM"/>
	<expression-filter expression="${AUD.REQIN}" doc:name="Rqi audit enable check"/>
	<transactional action="ALWAYS_BEGIN" doc:name="Transactional">
		<set-property propertyName="SystemName" value="#[ server.host + '/' +  mule.home.toString().split('/')[3]]" doc:name="Property"/>
		<catch-exception-strategy enableNotifications="false" logException="false" doc:name="Catch Exception Strategy">
			<set-property propertyName="SystemName" value="#[ server.host + '/' +  mule.home.toString()]" doc:name="Property"/>
		</catch-exception-strategy>
	</transactional>

	<wmq:outbound-endpoint queue="${Q.AUD}" connector-ref="JMS" doc:name="AuditQ" transformer-refs="RQI_Audit_Message_Properties" disableTemporaryReplyToDestinations="true" messageType="MQMT_DATAGRAM" persistentDelivery="true">
		<remove-property propertyName="MULE_*" doc:name="Remove MULE_* properties"/>
	</wmq:outbound-endpoint>
	<catch-exception-strategy doc:name="Catch Exception Strategy">
		<logger message="EXCEPTION WHILE WRITING REQUEST IN AUDITQ #[payload]" level="ERROR" doc:name="Exception in Rqi auditQ"/>
	</catch-exception-strategy>

</flow>

<flow name="Audit_ReplyOut">
	<vm:inbound-endpoint path="auditRpo" doc:name="audit Rpo VM"/>
	<expression-filter expression="${AUD.REPOUT}" doc:name="Rpo audit enable check"/>
	<set-variable variableName="serviceAndIntegrationServiceElapsedTime"
			value="#[new java.lang.Float(new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss.SSS').parse(sessionVars.messageContext.RpoTs).getTime() - new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss.SSS').parse(sessionVars.messageContext.RqiTs).getTime()) / 1000]"
			doc:name="Calculate serviceAndIntegrationServiceElapsedTime" />

	<transactional action="ALWAYS_BEGIN" doc:name="Transactional">
		<set-property propertyName="SystemName" value="#[ server.host + '/' +  mule.home.toString().split('/')[3]]" doc:name="Property"/>
		<catch-exception-strategy enableNotifications="false" logException="false" doc:name="Catch Exception Strategy">
			<set-property propertyName="SystemName" value="#[ server.host + '/' +  mule.home.toString()]" doc:name="Property"/>
		</catch-exception-strategy>
	</transactional>

	<wmq:outbound-endpoint queue="${Q.AUD}" connector-ref="JMS" doc:name="AuditQ" transformer-refs="RPO_Audit_Message_Properties" disableTemporaryReplyToDestinations="true" messageType="MQMT_DATAGRAM" persistentDelivery="true">
		<remove-property propertyName="MULE_*" doc:name="Remove MULE_* properties"/>
	</wmq:outbound-endpoint>
	<catch-exception-strategy doc:name="Catch Exception Strategy">
		<logger message="EXCEPTION WHILE WRITING REPLY OUT AUDITQ  ###CAUSE FOR EXCEPTION IS ::  #[org.mule.util.ExceptionUtils.getRootCauseMessage(exception)]" level="ERROR" doc:name="Exception in Rpo auditQ"/>
	</catch-exception-strategy>
</flow>

<flow name="Audit_RequestOut">
	<vm:inbound-endpoint path="auditRqo" doc:name="audit Rqo VM"/>
	<expression-filter expression="${AUD.REQOUT}" doc:name="Rqo audit enable check"/>

	<transactional action="ALWAYS_BEGIN" doc:name="Transactional">
		<set-property propertyName="SystemName" value="#[ server.host + '/' +  mule.home.toString().split('/')[3]]" doc:name="Property"/>
		<catch-exception-strategy enableNotifications="false" logException="false" doc:name="Catch Exception Strategy">
			<set-property propertyName="SystemName" value="#[ server.host + '/' +  mule.home.toString()]" doc:name="Property"/>
		</catch-exception-strategy>
	</transactional>

	<wmq:outbound-endpoint queue="${Q.AUD}" connector-ref="JMS" doc:name="AuditQ" transformer-refs="RQO_Audit_Message_Properties" disableTemporaryReplyToDestinations="true" messageType="MQMT_DATAGRAM" persistentDelivery="true">
		<remove-property propertyName="MULE_*" doc:name="Remove MULE_* properties"/>
	</wmq:outbound-endpoint>
	<catch-exception-strategy doc:name="Catch Exception Strategy">
		<logger message="EXCEPTION WHILE WRITING REQUEST OUT AUDITQ #[payload]" level="ERROR" doc:name="Exception in Rqo auditQ"/>
	</catch-exception-strategy>
</flow>   

<flow name="Audit_ReplyIn">
	<vm:inbound-endpoint path="auditRpi" doc:name="audit Rpi VM"/>
	<expression-filter expression="${AUD.REPIN}" doc:name="Rpi audit enable check"/>
	<set-variable variableName="serviceElapsedTime"
			value="#[new java.lang.Float(new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss.SSS').parse(sessionVars.messageContext.RpiTs).getTime() - new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss.SSS').parse(sessionVars.messageContext.RqoTs).getTime()) / 1000]"
			doc:name="Calculate serviceElapsedTime" />

	<transactional action="ALWAYS_BEGIN" doc:name="Transactional">
		<set-property propertyName="SystemName" value="#[ server.host + '/' +  mule.home.toString().split('/')[3]]" doc:name="Property"/>
		<catch-exception-strategy enableNotifications="false" logException="false" doc:name="Catch Exception Strategy">
			<set-property propertyName="SystemName" value="#[ server.host + '/' +  mule.home.toString()]" doc:name="Property"/>
		</catch-exception-strategy>
	</transactional>

	<wmq:outbound-endpoint queue="${Q.AUD}" connector-ref="JMS" doc:name="AuditQ" transformer-refs="RPI_Audit_Message_Properties" disableTemporaryReplyToDestinations="true" messageType="MQMT_DATAGRAM" persistentDelivery="true">
		<remove-property propertyName="MULE_*" doc:name="Remove MULE_* properties"/>
	</wmq:outbound-endpoint>
	<catch-exception-strategy doc:name="Catch Exception Strategy">
		<logger message="EXCEPTION WHILE WRITING REPLY IN AUDITQ #[payload]" level="ERROR" doc:name="Exception in Rpi auditQ"/>
	</catch-exception-strategy>
</flow>
<sub-flow name="processRequestIn">
	<set-variable variableName="MULE_REPLYTO_STOP" value="true" doc:name="set mule replyto stop"/>
	<flow-ref name="initializeMessageContext" doc:name="initializeMessageContext"/>  
	<flow-ref name="captureRequestInTime" doc:name="captureRequestInTime"/>
	<flow-ref name="auditRequestInMessage" doc:name="auditRequestInMessage"/>

</sub-flow>

<sub-flow name="processRequestOut">
	<flow-ref name="captureRequestOutTime" doc:name="captureRequestOutTime"/>  
	<flow-ref name="auditRequestOutMessage" doc:name="auditRequestOutMessage"/>   
</sub-flow>

<sub-flow name="processReplyIn">
	<flow-ref name="captureReplyInTime" doc:name="captureReplyInTime"/>
	<flow-ref name="auditReplyInMessage" doc:name="auditReplyInMessage"/>
</sub-flow>

<sub-flow name="processReplyOut">
	<expression-filter expression="#[sessionVars.messageContext.requester!='rpanbsParentService']" doc:name="Expression"/>        
	<flow-ref name="captureReplyOutTime" doc:name="captureReplyOutTime"/>
	<flow-ref name="auditReplyOutMessage" doc:name="auditReplyOutMessage"/>
	<set-payload value="true" doc:name="Set Payload"/>
</sub-flow>
<sub-flow name="initializeMessageContext">
	<set-session-variable variableName="messageContext" value="#[[ 'messageId': message.inboundProperties.MULE_MESSAGE_ID, 'rqiQueueName': message.inboundProperties.MULE_ORIGINATING_ENDPOINT  , 'accountingToken' : server.dateTime.format('yyyy-MM-dd hh:mm:ss:SSS')  + new java.util.Random().nextInt(1000) , 'replyTo': message.outboundProperties.JMSReplyTo ] ]" doc:name="Set messageContext"/>
</sub-flow>
<flow name="assignExceptionVariables">
	<set-session-variable variableName="exceptionOccured" value="#['YES']" doc:name="exceptionOccured"/>
	<set-session-variable variableName="causeForException" value="#[exception.cause] ::: #[org.mule.util.ExceptionUtils.getRootCauseMessage(exception)]" doc:name="Session Variable"/>
</flow>


<flow name="rpanbs-ESB-ross-filterFlow">
	<expression-filter expression="false" doc:name="Expression"/>
</flow>

<flow name="checkIfAnyExceptionForRequest">
	<logger message="#[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>
	<choice doc:name="checking for any clyde exception">
		<when expression="#[message.payloadAs(java.lang.String).substring(4,8) == '001E'   ]">
			<set-session-variable variableName="exceptionOccured" value="#['YES']" doc:name="exceptionOccured"/>
			<set-session-variable variableName="causeForException" value="#['Received exception from Service Provider. ']" doc:name="causeForException"/>

		</when>
		<when expression="#[message.payloadAs(java.lang.String) ==   '{NullPayload}' ]">
			<set-session-variable variableName="exceptionOccured" value="#['YES']" doc:name="exceptionOccured"/>
			<set-session-variable variableName="causeForException" value="#['response from service provider has been timed out']" doc:name="causeForException"/>
		</when>
		<otherwise>
			<logger message="dummy logger" level="DEBUG" doc:name="dummy logger"/>

		</otherwise>
	</choice>
</flow>
<message-properties-transformer name="Message_Properties" doc:name="Message Properties">
	<add-message-property key="JMSReplyTo" value="${Q.RPI}" />
</message-properties-transformer>

<message-properties-transformer name="Reply_Message_Properties" doc:name="Message Properties">
	<delete-message-property key="MULE_REPLYTO" />
	<delete-message-property key="JMSReplyTo" />
</message-properties-transformer>

<message-properties-transformer name="docSub_Message_Properties" doc:name="Message Properties">
	<add-message-property key="JMSReplyTo" value="${Q.RPI.DocSub}" />
</message-properties-transformer>

<message-properties-transformer name="docSub_Reply_Message_Properties" doc:name="Messagee Properties">
	<delete-message-property key="MULE_REPLYTO" />
	<delete-message-property key="JMSReplyTo" />
	<delete-message-property key="JMSCorrelationID" />
	<delete-message-property key="JMSDestination" />
	<delete-message-property key="MULE_CORRELATION_ID" />
</message-properties-transformer>

<flow name="getRequirement">
	<logger message="Getting requirement data from RMS" level="INFO" doc:name="Getting requirement data from RMS"/>

	<dw:transform-message doc:name="Transform Message">
		<dw:set-payload>
			<![CDATA[%dw 1.0
%output application/xml
---
{
	GetRqtOrderRequest @(nml-version : '001' ,nml-type : 'Structure' ) : {
		
		MsgProtocol: 'SCIP',
		MsgProtocolVersionNum: '001',
		MsgTypeCde : 'N',
		MsgClientOperId: sessionVars.messageData.ClientID when sessionVars.messageData.ClientID? otherwise '',
		MsgSenderApplId: 'ROSS',
		MsgName: 'GetRqtOrderRequest',
		MsgVersionNum: '001',
		RequestOperId : 'WBIMB',
		RequestDtm : now as :string {format: "yyyy-MM-dd HH:mm:ss.SSS"},
		RqtOrdNum : sessionVars.RqtOrdNum
	}
	
}]]>
		</dw:set-payload>
	</dw:transform-message>
	<object-to-string-transformer doc:name="Object to String"/>
	<logger message="GetRqtOrderRequest to ${Q.RQO.RMS}  :: #[payload]" level="INFO" doc:name="GetRqtOrderRequest "/>

	<enricher target="#[payload]" doc:name="Message Enricher">
		<wmq:outbound-endpoint exchange-pattern="request-response" queue="${Q.RQO.RMS}" connector-ref="WMQ" responseTimeout="${Q.RPI.RESPONSE.TIMEOUT}" transformer-refs="docSub_Message_Properties" responseTransformer-refs="docSub_Reply_Message_Properties" doc:name="RMS Queue"/>
	</enricher>
	<object-to-string-transformer doc:name="Object to String" mimeType="application/xml"/>
	<flow-ref name="checkIfAnyExceptionForRequest" doc:name="checkIfAnyExceptionForRequest"/>
	<choice doc:name="Check for Timeout or Service provider exception">
		<when expression="#[sessionVars.exceptionOccured == 'YES'  ]">
			<logger message="dummy logger" level="DEBUG" doc:name="dummy logger"/>
		</when>
		<otherwise>
			<expression-component doc:name="Expression">
				<![CDATA[sessionVars['RqtOrder'] = dw(' RqtOrder : payload.GetRqtOrderReply.RqtOrder', 'application/xml');]]>
			</expression-component>
		</otherwise>
	</choice>
	<catch-exception-strategy enableNotifications="false" logException="false" doc:name="Catch Exception Strategy">
		<flow-ref name="assignExceptionVariables" doc:name="assignExceptionVariables"/>
	</catch-exception-strategy>

</flow>


<flow name="updateOrder">
	<logger message="Updating requirement  :: #[sessionVars.RqtOrdNum]" level="INFO" doc:name="Updating requirement "/>
	<dw:transform-message doc:name="Transform Message">
		<dw:set-payload>
			<![CDATA[%dw 1.0
%output application/xml
---
{
	UpdateRqtOrderRequest @(nml-version : '001' ,nml-type : 'Structure' ) : {
		
		MsgProtocol: 'SCIP',
		MsgProtocolVersionNum: '001',
		MsgTypeCde : 'N',
		MsgClientOperId: sessionVars.messageData.ClientID when sessionVars.messageData.ClientID? otherwise '',
		MsgSenderApplId: 'ROSS',
		MsgName: 'UpdateRqtOrderRequest',
		MsgVersionNum: '001',
		RequestOperId : 'WBIMB',
		RequestDtm : now as :string {format: "yyyy-MM-dd HH:mm:ss.SSS"},
		
		RqtOrder : {
		//(sessionVars.RequirementData.Requirement.ClearPending.*Field map {
			
		//	($.Name ) : $.Value when $.Value? otherwise ''
			
		//}),
		
		(sessionVars.RqtOrder)
		
		//RqtOrdDocRelArray : {
		//	DocumentId : sessionVars.messageData.DocIdNum,
		//	DocumentFileLocationName : sessionvars.messageData.DocumentURI
			
			
		//},
		
		//RqtOrdDocRelArrayCnt : sessionVars.TempXML.RqtOrder.RqtOrdDocRelArrayCnt + 1
		
		
	}
	
	
}
}]]>
		</dw:set-payload>
	</dw:transform-message>
	<object-to-string-transformer doc:name="Object to String" mimeType="application/xml"/>
	<logger message="UpdateRqtOrderRequest to RMS : ${Q.RQO.RMS}  #[payload]" level="INFO" doc:name="UpdateRqtOrderRequest to RMS"/>

	<enricher target="#[payload]" doc:name="Message Enricher">
		<wmq:outbound-endpoint exchange-pattern="request-response" queue="${Q.RQO.RMS}" connector-ref="WMQ" responseTimeout="${Q.RPI.RESPONSE.TIMEOUT}" transformer-refs="docSub_Message_Properties" responseTransformer-refs="docSub_Reply_Message_Properties" doc:name="RMS Queue"/>
	</enricher>


	<object-to-string-transformer doc:name="Object to String" mimeType="application/xml"/>
	<flow-ref name="checkIfAnyExceptionForRequest" doc:name="checkIfAnyExceptionForRequest"/>
	<choice doc:name="Check if Timeout or service provider exception ">
		<when expression="#[sessionVars.exceptionOccured == 'YES'  ]">
			<logger message="dummy logger" level="DEBUG" doc:name="dummy logger"/>

		</when>
		<otherwise>
			<set-variable variableName="ReplyMsgTxt" value="#[xpath3('/UpdateRqtOrderReply/ReplyMsgTxt')]" doc:name="ReplyMsgTxt"/>
			<choice doc:name="Routing based on ReplyMsgTxt ">
				<when expression="#[ flowVars.ReplyMsgTxt == '' ||  flowVars.ReplyMsgTxt  == null  ]">
					<logger message="###  Requirement   #[sessionVars.RqtOrdNum]   updated.  ###" level="INFO" doc:name="Requirement  updated"/>
					<set-session-variable variableName="UpdatedOrder" value="#['Y']" doc:name="UpdatedOrder"/>
				</when>
				<otherwise>
					<logger message="###  Requirement  #[sessionVars.RqtOrdNum] failed to update.   ###  #[System.getProperty('line.separator')]###Message from RMS: #[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Requirement failed to update"/>
				</otherwise>
			</choice>
		</otherwise>
	</choice>
	<catch-exception-strategy enableNotifications="false" logException="false" doc:name="Catch Exception Strategy">
		<flow-ref name="assignExceptionVariables" doc:name="assignExceptionVariables"/>
	</catch-exception-strategy>


</flow>
